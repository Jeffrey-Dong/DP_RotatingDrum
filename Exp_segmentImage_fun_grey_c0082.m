function [BW,maskedImage] = segmentImage(X)
%segmentImage Segment image using auto-generated code from imageSegmenter app
%  [BW,MASKEDIMAGE] = segmentImage(X) segments image X using auto-generated
%  code from the imageSegmenter app. The final segmentation is returned in
%  BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 22-May-2022
%----------------------------------------------------


% Graph cut
foregroundInd = [605611 605615 605622 605626 605631 605633 605637 611004 611008 611037 611041 614244 617484 617529 622884 623964 624012 626177 629364 631581 634764 636924 636984 640229 642328 644554 647728 648808 648811 649956 653196 653201 654211 656371 658603 660691 660768 666095 666173 668255 672656 673655 675902 677975 680135 680227 685535 685539 685629 685634 688879 690939 692019 694281 697419 698601 700659 701846 701850 703899 707253 709299 709418 712539 714818 717939 721179 722386 724419 727792 729819 730899 733193 736299 736439 741699 741839 742779 744000 748179 749405 753579 755739 760059 763453 765459 767619 771939 772093 774099 776419 779499 781819 781822 784899 785062 785979 788302 791542 791545 796945 798935 800190 808830 811895 819636 820535 823956 828095 832596 835836 838888 840158 844288 850958 851848 856168 868243 870205 871285 875605 880123 882085 886603 887683 891805 892003 895045 898285 898483 899565 905845 906045 911245 915560 918800 919005 922245 929600 930680 930885 934125 941480 942560 942765 949040 951200 953570 954440 958970 960920 963074 966530 969554 969770 974954 978410 984669 987050 990066 990290 990296 993536 998702 998936 1001096 1005182 1009496 1014058 1017055 1021375 1024609 1025944 1029184 1030004 1032164 1033504 1037561 1041881 1045117 1049434 1049709 1053749 1056989 1061304 1061589 1064543 1065909 1068863 1069149 1073469 1077497 1077789 1081029 1084269 1089370 1091530 1092909 1096925 1097229 1101245 1103402 1108029 1108797 1109109 1116351 1119909 1120989 1128549 1134702 1135029 1140098 1143338 1148735 1149064 1154464 1156620 1162020 1162769 1167420 1169576 1170325 1176056 1180036 1182533 1186847 1186853 1191912 1194067 1194405 1199799 1203039 1203783 1209180 1210597 1215997 1217820 1223214 1228610 1230026 1231848 1236158 1236163 1238666 1240478 1242636 1242983 1248028 1248383 1251263 1251619 1256659 1257014 1259174 1262056 1264211 1264571 1269966 1270688 1276084 1277523 1282919 1283637 1286153 1287946 1290472 1293338 1293712 1298732 1300891 1304501 1306285 1311678 1311680 1313138 1313833 1317458 1319230 1324625 1326093 1327862 1331487 1332178 1334726 1335414 1340126 1341887 1342280 1347285 1347678 1353073 1354837 1355229 1355233 1360232 1360629 1363469 1366025 1367785 1367789 1368181 1373181 1373573 1373576 1375335 1375341 1378970 1379655 1382203 1382894 1387601 1388288 1389756 1393684 1395149 1395154 1395843 1400549 1401237 1402703 1406636 1408103 1408785 1408789 1413492 1413497 1414185 1415258 1415262 1415650 1420653 1420658 1421046 1424281 1426051 1429287 1429678 1432522 1432527 1433993 1437231 1438999 1442234 1442626 1447632 1448022 1450179 1450872 1454112 1454495 1459507 1459512 1461667 1463120 1468513 1468518 1471387 1471749 1476066 1480027 1481462 1484696 1487582 1491175 1496561 1502698 1504115 1509507 1513818 1519213 1521366 1523214 1526760 1532153 1532157 1534306 1534308 1540769 1540773 1542649 1544809 1544810 1546156 1546161 1549354 1549359 1549361 1549370 1549373 1549376 1549381 1549384 1550215 1550217 1552386 1552388 1553659 1553661 1553672 1556874 1556880 1556888 1556895 1557793 1557798 1557799 1561039 1561044 1562262 1562269 1564284 1564287 1568729 1568736 1569687 1569691 1570869 1570876 1570884 1572931 1572935 1572938 1576262 1577258 1577262 1577269 1581589 1581593 1581599 1581601 1581604 1581607 1581612 1581619 1581625 1581629 1581630 1581640 1581641 1581647 ];
backgroundInd = [523517 523520 523525 523528 523533 523536 523539 523544 523546 523550 523555 523557 523561 523566 523568 523572 523577 523579 528914 528979 528984 528986 528990 530070 530075 532147 532149 535475 535477 535481 536462 540881 540886 541858 542936 543046 543048 547368 547373 548331 550618 551566 551571 557101 562364 564519 564665 570073 576399 576558 577640 578554 583046 588450 590613 590617 592592 596017 599258 600152 604664 610068 610947 611152 613107 623040 624123 624987 629528 631693 632547 637095 642264 643580 644662 647664 650067 650071 655224 655471 658713 664118 664123 668184 668445 671690 677090 677096 678178 683304 683578 688984 690864 691144 696545 700578 701950 704115 705978 714917 718157 718163 718938 721403 724643 724647 730047 734367 736528 741613 741928 746248 749488 753808 754571 755968 761368 763211 765688 767848 773253 778653 779733 783725 784805 785133 790533 791613 797013 797015 799175 803495 804245 808895 810725 811055 816455 820775 822935 826925 828335 831580 835900 839880 840220 843460 847440 847780 852100 853920 854260 859660 863637 863985 868305 871197 871545 874785 874788 880188 883428 887748 892073 895313 899633 903953 906829 907193 910064 911513 915833 917993 927713 930575 930953 935273 939209 939593 942833 951089 951473 954325 954713 962962 963353 966197 969833 973073 975233 981713 982389 987113 989944 993593 994673 996421 998993 1005473 1006135 1006553 1009793 1017353 1018433 1020168 1024913 1028802 1029233 1030313 1036793 1037873 1041753 1042193 1048673 1049307 1049753 1056860 1060556 1061636 1064413 1064415 1065488 1068116 1069196 1071964 1073516 1079996 1081076 1084909 1085396 1091382 1091876 1092956 1097276 1098935 1103756 1104836 1108651 1111316 1112967 1113476 1116716 1123196 1124836 1132393 1137236 1138862 1139396 1145876 1157211 1158833 1162073 1172320 1172873 1176636 1180425 1186345 1187985 1193385 1194464 1196061 1199864 1207935 1208504 1212824 1216574 1221968 1222538 1223048 1227938 1232763 1235498 1245212 1250612 1257596 1258172 1263572 1271626 1276532 1278691 1281346 1283011 1292731 1298131 1298615 1304015 1305685 1311085 1311573 1318645 1324043 1324527 1325123 1330523 1332087 1335325 1340237 1352111 1354759 1360154 1360749 1363989 1367712 1369872 1373704 1375272 1379588 1382828 1383418 1390976 1393622 1395782 1407162 1407660 1409815 1415796 1418455 1424930 1427673 1429247 1431407 1442203 1443283 1443862 1449760 1455740 1457320 1462715 1465454 1465955 1475670 1478910 1480560 1488119 1490788 1495666 1499422 1504304 1508057 1513455 1514011 1519410 1522638 1527488 1528566 1533966 1534515 1543681 1544229 1549081 1549621 1550161 1551773 1556636 1562561 1563116 1567959 1572836 1573350 1574996 1579316 1580892 1584716 1586876 1586879 1587361 1587364 1589511 1592284 1596608 1597051 1598770 1601360 1604175 1604578 1604587 1609579 1609958 1609965 1609976 1611739 1611742 1613184 1617147 1618568 1618577 1623629 1623633 1628271 1628275 1629033 1629038 1631200 1633642 1633651 1633655 1633663 1640090 1640095 1640111 1642010 1642222 1642234 1645252 1647609 1650657 1650661 1651917 1651922 1652823 1657298 1657309 1658228 1658231 1662687 1662695 1663636 1663640 1664822 1664825 1664836 1665802 1665807 1670134 1670145 1670152 1670156 1670161 1670163 1670168 1670172 1670174 1670179 1670181 1670185 1670190 1670201 1670203 ];
L = superpixels(X,10468);
BW = lazysnapping(X,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = X;
maskedImage(~BW) = 0;
end

